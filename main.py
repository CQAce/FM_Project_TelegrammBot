import telebot # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–º
from telebot import types # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
bot = telebot.TeleBot('7733019791:AAFZYEnlOx3XoPRzCWocdsiAJ1pRprwzl18') # –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞

import pytesseract # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ/—Ñ–æ—Ç–æ
from PIL import Image
import io
# https://github.com/tesseract-ocr/tesseract/releases/download/5.5.0/tesseract-ocr-w64-setup-5.5.0.20241111.exe - —Å–∫–∞—á–∞—Ç—å Teseract –¥–ª—è Window 64-bit
# https://digi.bib.uni-mannheim.de/tesseract/ - —Å–∫–∞—á–∞—Ç—å Teseract –¥–ª—è Window 32-bit
pytesseract.pytesseract.tesseract_cmd = r'd:/Programs/tesseract.exe' # —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ Tesseract

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è –®–ö
from pyzbar.pyzbar import decode

import gspread
from oauth2client.service_account import ServiceAccountCredentials

import re # –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
patternEAN = r'^\d{1,14}$' # –®–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ EAN. –ù–µ –±–æ–ª–µ–µ 14-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
patternCell = r'^[A-Z]\d{3} \d{4} \d{2}$'  # –®–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ü—Ä–∏–º–µ—Ä: A502 2010 30

# ================================================================== –ë–õ–û–ö-1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ ================================================================================================
# –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
error_data = {
    'errorType': None,
    'fixEAN': None,
    'fixCell': None,
    'userName': None
}
current_step = None

@bot.message_handler(['start'])
def start(message):
    error_data['userName'] = message.from_user.first_name
    print(error_data['userName'])
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width=1) # –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    errorBtn = [
        types.KeyboardButton('–ì–∞–±–∞—Ä–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —è—á–µ–π–∫–∏'),
        types.KeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'),
        types.KeyboardButton('–ù–æ–º–µ—Ä —è—á–µ–π–∫–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫'),
        types.KeyboardButton('–†–∞–∑–º–µ—â—ë–Ω –≥—Ä—É–ø–ø–∞–∂')
    ]
    markup.add(*errorBtn) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏.', reply_markup=markup) # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è Start
    bot.register_next_step_handler(message, showButtomEan) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é showButtom 


# ================================================================== –ë–õ–û–ö-2: –§–∏–∫—Å–∞—Ü–∏—è EAN ==================================================================================================
def showButtomEan(message):
    if message.text != '/start':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        error_data['errorType'] = message.text.strip()
        print(error_data['errorType'])
        markup = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
        buttons = [
            types.KeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É üì∑'),
            types.KeyboardButton('–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è'),
            types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô')
        ]
        markup.add(*buttons) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        bot.send_message(message.chat.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ EAN —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, fixitEAN) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é fixitError
    else:
        start(message)


# –§–∏–∫—Å–∞—Ü–∏—è EAN-–∫–æ–¥–∞
def fixitEAN(message):
    if message.text == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É üì∑':
        global current_step
        current_step = 'fixEAN'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        bot.send_message(message.chat.id, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ EAN —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
    elif message.text == '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è':
        current_step = 'fixEAN'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô':
        start(message)


# –°–ª—É—à–∞—Ç–µ–ª—å--> –§–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    global error_data, current_step
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    if current_step == 'fixEAN':
        process_fixEAN_photo(message)
    elif current_step == 'fixCell':
        process_fixCell_photo(message)

# –°–ª—É—à–∞—Ç–µ–ª—å--> –¢–µ–∫—Å—Ç
@bot.message_handler(func=lambda massage:True)
def handle_text(message):
    global error_data, current_step
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    if current_step == 'fixEAN':
        process_fixEAN_text(message)
    elif current_step == 'fixCell':
        process_fixCell_text(message)


#–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å EAN-–∫–æ–¥–æ–º
def process_fixEAN_photo(message):
    global error_data
    file_info = bot.get_file(message.photo[-1].file_id)  # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_path = bot.download_file(file_info.file_path)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pytesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    image = Image.open(io.BytesIO(photo_path))
    decoded_objects = decode(image)
    if decoded_objects:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –≤–∏–¥–∏—Ç –®–ö, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        barcode_data = decoded_objects[0].data.decode('utf-8')
        error_data['fixEAN'] = barcode_data.strip()
    else:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –®–ö, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ñ–æ—Ç–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        recognized_text = pytesseract.image_to_string(image, lang='eng+rus')
        error_data['fixEAN'] = recognized_text.strip()
    print(error_data['fixEAN'])
    bot.send_message(message.chat.id, "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    showButtomCell(message)  # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é btnFix–°ell

#–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ EAN-–∫–æ–¥–∞
def process_fixEAN_text(message):
    if re.match(patternEAN, message.text): # —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        error_data['fixEAN'] = message.text.strip()
        print(error_data['fixEAN'])
        bot.send_message(message.chat.id, "EAN –∑–∞–ø–∏—Å–∞–Ω!")
        showButtomCell(message) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é btnFix–°ell
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô':
        start(message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")    


# ================================================================== –ë–õ–û–ö-3: –§–∏–∫—Å–∞—Ü–∏—è —è—á–µ–π–∫–∏ ==================================================================================================
def showButtomCell(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 2)
    buttons = [
        types.KeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É üì∑'),
        types.KeyboardButton('–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è'),
        types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô')
    ]
    markup.add(*buttons) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏", reply_markup=markup)
    bot.register_next_step_handler(message, fixitCell) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é fixitCell


# –§–∏–∫—Å–∞—Ü–∏—è —è—á–µ–π–∫–∏
def fixitCell(message):
    if message.text == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É üì∑':
        global current_step
        current_step = 'fixCell' # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        bot.send_message(message.chat.id, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —è—á–µ–π–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
    elif message.text == '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è':
        current_step = 'fixCell'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: A123 4567 89")
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô': 
        start(message) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é start (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ)


#–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º —è—á–µ–π–∫–∏
def process_fixCell_photo(message):
    global error_data
    file_info = bot.get_file(message.photo[-1].file_id)  # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_path = bot.download_file(file_info.file_path)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pytesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    image = Image.open(io.BytesIO(photo_path))
    decoded_objects = decode(image)
    if decoded_objects:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –≤–∏–¥–∏—Ç –®–ö, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        barcode_data = decoded_objects[0].data.decode('utf-8')
        error_data['fixCell'] = barcode_data.strip()
    else:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –®–ö, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ñ–æ—Ç–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        recognized_text = pytesseract.image_to_string(image, lang='eng+rus')
        error_data['fixCell'] = recognized_text.strip()
    print(error_data['fixCell'])
    bot.send_message(message.chat.id, "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    ControlCheck(message)  # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é btnFix–°ell

#–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏
def process_fixCell_text(message):
    global error_data
    if re.match(patternCell, message.text): # —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        error_data['fixCell'] = message.text.strip()
        print(error_data['fixCell'])
        bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
        ControlCheck(message) # —Å–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é ControlCheck
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô':
        start(message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ================================================================== –ë–õ–û–ö-3: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ==================================================================================================
def ControlCheck(message):
    global error_data
    markup = types.InlineKeyboardMarkup()
    buttonOk = types.InlineKeyboardButton('‚úÖ', callback_data='dataIsCorrect')
    buttonNotOk = types.InlineKeyboardButton('‚ùå', callback_data='dataIsNotCorrect')
    markup.add(buttonOk, buttonNotOk)
    bot.send_message(message.chat.id, 
    f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?</b>\n <u>–¢–∏–ø –æ—à–∏–±–∫–∏:</u>\n {error_data['errorType']}\n <u>EAN:</u>\n {error_data['fixEAN']}\n <u>–ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏:</u>\n {error_data['fixCell']}", parse_mode='html', reply_markup=markup)

# ================================================================== –ë–õ–û–ö-4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã ==================================================================================================
# credentials = ServiceAccountCredentials.from_json_keyfile_name(
#     CREDENTIALS_FILE,
#     []
# )

# –ö–æ–º–∞–Ω–¥–∞, –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.
bot.polling(non_stop=True) # –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É bot.infinity_polling()
